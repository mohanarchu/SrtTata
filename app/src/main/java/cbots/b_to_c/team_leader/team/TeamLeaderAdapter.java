package cbots.b_to_c.team_leader.team;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.Filter;import android.widget.Filterable;import android.widget.LinearLayout;import android.widget.TextView;import androidx.annotation.NonNull;import androidx.recyclerview.widget.RecyclerView;import com.chauthai.swipereveallayout.SwipeRevealLayout;import com.chauthai.swipereveallayout.ViewBinderHelper;import java.util.ArrayList;import java.util.Arrays;import java.util.List;import butterknife.BindView;import butterknife.ButterKnife;import cbots.b_to_c.R;import cbots.b_to_c.config.DateConversion;import cbots.b_to_c.home.DataPojo;public class TeamLeaderAdapter extends RecyclerView.Adapter<TeamLeaderAdapter.TeamViewHodler> implements Filterable {    private final ViewBinderHelper viewBinderHelper = new ViewBinderHelper();    List<DataPojo.Results> results,filterResults;    @NonNull    @Override    public TeamViewHodler onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {        return new TeamViewHodler(LayoutInflater.from(parent.getContext()).inflate(R.layout.team_leader_layout, parent, false));    }    @Override    public void onBindViewHolder(@NonNull TeamViewHodler holder, int position) {        viewBinderHelper.bind(holder.swipeLayouts, String.valueOf(position));        holder.setDatas(filterResults.get(position));    }    public void setDatas(List<DataPojo.Results> results){        this.results = results;        this.filterResults = results;    }    @Override    public int getItemCount() {        return filterResults != null ? filterResults.size() : 0;    }    class TeamViewHodler extends RecyclerView.ViewHolder {        @BindView(R.id.Tldates)        TextView Tldates;        @BindView(R.id.TldayOfweeks)        TextView TldayOfweeks;        @BindView(R.id.makeCall)        LinearLayout makeCall;        @BindView(R.id.makeSms)        LinearLayout makeSms;        @BindView(R.id.makeWhatsapp)        LinearLayout makeWhatsapp;        @BindView(R.id.makeMail)        LinearLayout makeMail;        @BindView(R.id.tlCusName)        TextView tlCusName;        @BindView(R.id.tLCaMobile)        TextView tLCaMobile;        @BindView(R.id.tLCaName)        TextView tLCaName;        @BindView(R.id.tlInhouse)        TextView tlInhouse;        @BindView(R.id.tLVechileModel)        TextView tLVechileModel;        @BindView(R.id.tLVechileStatus)        TextView tLVechileStatus;        @BindView(R.id.swipe_layoutTeam)        SwipeRevealLayout swipeLayouts;        @BindView(R.id.mainLayout_team)        LinearLayout mainLayout;        public TeamViewHodler(@NonNull View itemView) {            super(itemView);            ButterKnife.bind(this, itemView);            initView();        }        void initView() {            viewBinderHelper.setOpenOnlyOne(true);            makeMail.setVisibility(View.GONE);        }        void setDatas(DataPojo.Results results) {            List<String> elephantList = Arrays.asList(DateConversion.getDay(results.getOrderDate()).                    split("-"));            Tldates.setText(elephantList.get(0).trim());            TldayOfweeks.setText(elephantList.get(1).toUpperCase());            tlCusName.setText(results.getContactName());            tLCaName.setText(results.getCa());            tlInhouse.setText(results.getFinanceOption());            tLVechileStatus.setText(results.getStockStatus());            tLVechileModel.setText(results.getProductLine());            tLCaMobile.setText(results.getCaMobile());        }    }    @Override    public Filter getFilter() {        return new Filter() {            @Override            protected FilterResults performFiltering(CharSequence charSequence) {                String charString = charSequence.toString();                if (charString.isEmpty()) {                    filterResults = results;                } else {                    List<DataPojo.Results> filteredList = new ArrayList<>();                    for (DataPojo.Results row : results) {                        if (row.getTeam().toLowerCase().equals(charString.toLowerCase())) {                            filteredList.add(row);                        }                    }                    filterResults = filteredList;                }                FilterResults filterResults1 = new FilterResults();                filterResults1.values = filterResults;                return filterResults1;            }            @Override            protected void publishResults(CharSequence charSequence, FilterResults filterResult) {                filterResults = (List<DataPojo.Results>) filterResult.values;                notifyDataSetChanged();            }        };    }}