package cbots.b_to_c.team_leader.team;import android.annotation.SuppressLint;import android.content.Intent;import android.content.pm.PackageManager;import android.net.Uri;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.Filter;import android.widget.Filterable;import android.widget.LinearLayout;import android.widget.TextView;import android.widget.Toast;import androidx.annotation.NonNull;import androidx.recyclerview.widget.RecyclerView;import com.chauthai.swipereveallayout.SwipeRevealLayout;import com.chauthai.swipereveallayout.ViewBinderHelper;import java.net.URLEncoder;import java.util.ArrayList;import java.util.Arrays;import java.util.List;import butterknife.BindView;import butterknife.ButterKnife;import cbots.b_to_c.MainActivity;import cbots.b_to_c.R;import cbots.b_to_c.config.DateConversion;import cbots.b_to_c.details.DetailsView;import cbots.b_to_c.details.SharedArray;import cbots.b_to_c.home.DataPojo;import cbots.b_to_c.team_leader.LeaderDocsView;public class TeamLeaderAdapter extends RecyclerView.Adapter<TeamLeaderAdapter.TeamViewHodler> implements Filterable {    private final ViewBinderHelper viewBinderHelper = new ViewBinderHelper();    List<DataPojo.Results> results,filterResults;    ValueClicked valueClicked;    boolean CaFIlter,fromCaLogin;    public TeamLeaderAdapter(boolean caFIlter,boolean fromCaLogin){        this.CaFIlter = caFIlter;        this.fromCaLogin = fromCaLogin;    }    @NonNull    @Override    public TeamViewHodler onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {        return new TeamViewHodler(LayoutInflater.from(parent.getContext()).inflate(R.layout.team_leader_layout, parent, false));    }    @Override    public void onBindViewHolder(@NonNull TeamViewHodler holder, int position) {        viewBinderHelper.bind(holder.swipeLayouts, filterResults.get(position).get_id());        holder.setDatas(filterResults.get(position));        holder.makeSms.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                Intent intent = new Intent(Intent.ACTION_SENDTO);                intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);                intent.setData(Uri.parse("smsto:" + filterResults.get(position).getContactPhones())); // This ensures only SMS apps respond                intent.putExtra("sms_body", "");                holder.itemView.getContext(). startActivity(intent);            }        });        holder.makeCall.setOnClickListener(view -> {            ((MainActivity) holder.itemView.getContext()).getCallPermission(new MainActivity.RequestPermissionAction() {                @Override                public void permissionDenied() {                    Intent callIntent = new Intent(Intent.ACTION_DIAL);                    callIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);                    callIntent.setData(Uri.parse("tel:"+filterResults.get(position).getCaMobile()));//change the number                    holder.itemView.getContext(). startActivity(callIntent);                }                @SuppressLint("MissingPermission")                @Override                public void permissionGranted() {                    Intent callIntent = new Intent(Intent.ACTION_CALL);                    callIntent.setData(Uri.parse("tel:" + filterResults.get(position).getContactPhones()));                    holder.itemView.getContext().startActivity(callIntent);                }            });        });        holder.makeWhatsapp.setOnClickListener(view -> {            PackageManager packageManager =  holder.itemView.getContext().getPackageManager();            Intent i = new Intent(Intent.ACTION_VIEW);            String phone = "+91" + filterResults.get(position).getContactPhones();            String message ="Hello";            try {                String url = "https://api.whatsapp.com/send?phone=" + phone + "&text=" +                        URLEncoder.encode( "", "UTF-8");                i.setPackage("com.whatsapp");                i.setData(Uri.parse(url));                if (i.resolveActivity(packageManager) != null) {                    holder.itemView.getContext().startActivity(i);                }            } catch (Exception e) {                e.printStackTrace();            }        });    }    public void setDatas(List<DataPojo.Results> results,ValueClicked valueClicked){        this.results = results;        this.filterResults = results;        viewBinderHelper.setOpenOnlyOne(true);        this.valueClicked = valueClicked;    }    public interface ValueClicked {        void  clicked(int position, List<DataPojo.Results> results,boolean fromCaLogin);    }    @Override    public int getItemCount() {        return filterResults != null ? filterResults.size() : 0;    }    class TeamViewHodler extends RecyclerView.ViewHolder {        @BindView(R.id.Tldates)        TextView Tldates;        @BindView(R.id.TldayOfweeks)        TextView TldayOfweeks;        @BindView(R.id.makeCall)        LinearLayout makeCall;        @BindView(R.id.makeSms)        LinearLayout makeSms;        @BindView(R.id.makeWhatsapp)        LinearLayout makeWhatsapp;        @BindView(R.id.makeMail)        LinearLayout makeMail;        @BindView(R.id.tlCusName)        TextView tlCusName;        @BindView(R.id.tLCaMobile)        TextView tLCaMobile;        @BindView(R.id.tLCaName)        TextView tLCaName;        @BindView(R.id.tlInhouse)        TextView tlInhouse;        @BindView(R.id.tLVechileModel)        TextView tLVechileModel;        @BindView(R.id.tLVechileStatus)        TextView tLVechileStatus;        @BindView(R.id.swipe_layoutTeam)        SwipeRevealLayout swipeLayouts;        @BindView(R.id.mainLayout_team1)        LinearLayout mailLayout;        TeamViewHodler(@NonNull View itemView) {            super(itemView);            ButterKnife.bind(this, itemView);            mailLayout.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View view) {                 //   Toast.makeText(itemView.getContext(),"Clicked",Toast.LENGTH_SHORT).show();                    valueClicked.clicked(getAdapterPosition(),filterResults,fromCaLogin);                }            });        }        void setDatas(DataPojo.Results results) {            makeMail.setVisibility(View.GONE);            List<String> elephantList = Arrays.asList(DateConversion.getDay(results.getOrderDate()).                    split("-"));            Tldates.setText(elephantList.get(0).trim());            TldayOfweeks.setText(elephantList.get(1).toUpperCase());            tlCusName.setText(results.getContactName());            if (fromCaLogin) {                String part = results.getOrderNo().substring(results.getOrderNo().length() - 6);                tLCaName.setText(part);            }else  {                tLCaName.setText(results.getCa());            }            tlInhouse.setText(results.getFinanceOption());            tLVechileStatus.setText(results.getStockStatus());            tLVechileModel.setText(results.getProductLine());            tLCaMobile.setText(results.getCaMobile());        }    }    @Override    public Filter getFilter() {        return new Filter() {            @Override            protected FilterResults performFiltering(CharSequence charSequence) {                String charString = charSequence.toString();                if (charString.isEmpty()) {                    filterResults = results;                } else {                    List<DataPojo.Results> filteredList = new ArrayList<>();                    for (DataPojo.Results row : results) {                        if (CaFIlter) {                            if (row.getTeam().toLowerCase().equals(charString.toLowerCase())) {                                filteredList.add(row);                            }                        } else {                            if (row.getAgeing().toLowerCase().equals(charString.toLowerCase())) {                                filteredList.add(row);                            }                        }                    }                    filterResults = filteredList;                }                FilterResults filterResults1 = new FilterResults();                filterResults1.values = filterResults;                return filterResults1;            }            @Override            protected void publishResults(CharSequence charSequence, FilterResults filterResult) {                filterResults = (List<DataPojo.Results>) filterResult.values;                notifyDataSetChanged();            }        };    }}